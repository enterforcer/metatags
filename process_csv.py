import os
import pandas as pd
import time
import torch
from transformers import pipeline

# ------------------------- –ü–∞—Ä–∞–º–µ—Ç—Ä—ã -------------------------
csv_path = "/content/metatags1/provided_file.csv"  # –û–±–Ω–æ–≤–∏—Ç–µ, –µ—Å–ª–∏ –Ω—É–∂–Ω–æ
output_file = "/content/products_with_generated_text.csv"
model_id = "distilgpt2"  # –ò—Å–ø–æ–ª—å–∑—É–µ–º –º–æ–¥–µ–ª—å distilgpt2

# ------------------------- –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞–ª–∏—á–∏—è CSV-—Ñ–∞–π–ª–∞ -------------------------
if not os.path.exists(csv_path):
    print(f"‚ùå –û—à–∏–±–∫–∞: CSV-—Ñ–∞–π–ª –Ω–µ –Ω–∞–π–¥–µ–Ω: {csv_path}")
    exit()
else:
    print(f"‚úÖ CSV-—Ñ–∞–π–ª –Ω–∞–π–¥–µ–Ω: {csv_path}")

# ------------------------- –ó–∞–≥—Ä—É–∑–∫–∞ –º–æ–¥–µ–ª–∏ distilgpt2 -------------------------
device = 0 if torch.cuda.is_available() else -1
print("–ò—Å–ø–æ–ª—å–∑—É–µ–º—ã–π –¥–µ–≤–∞–π—Å:", "GPU" if device == 0 else "CPU")
print("–ó–∞–≥—Ä—É–∂–∞—é –º–æ–¥–µ–ª—å distilgpt2 –∏–∑ Hugging Face Hub...")

try:
    generator = pipeline("text-generation", model=model_id, device=device)
    print(f"‚úÖ –ú–æ–¥–µ–ª—å '{generator.model.config._name_or_path}' —É—Å–ø–µ—à–Ω–æ –∑–∞–≥—Ä—É–∂–µ–Ω–∞.")
except Exception as e:
    print(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ –º–æ–¥–µ–ª–∏: {e}")
    exit()

print(f"–ò—Å–ø–æ–ª—å–∑—É–µ–º–∞—è –º–æ–¥–µ–ª—å: {generator.model.config._name_or_path}")
print(f"–ò—Å–ø–æ–ª—å–∑—É–µ–º—ã–π –¥–µ–≤–∞–π—Å: {'GPU' if device == 0 else 'CPU'}")

# ------------------------- –û–±–Ω–æ–≤–ª–µ–Ω–Ω—ã–π –ø—Ä–æ–º–ø—Ç –¥–ª—è –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ Title –∏ Description -------------------------
def generate_text(product_name):
    """
    –ì–µ–Ω–µ—Ä–∏—Ä—É–µ—Ç Title –∏ Description –¥–ª—è —Ç–æ–≤–∞—Ä–∞.
    
    –¢—Ä–µ–±–æ–≤–∞–Ω–∏—è:
      - Title: –Ω–µ –±–æ–ª–µ–µ 70 —Å–∏–º–≤–æ–ª–æ–≤, –∫—Ä–∞—Ç–∫–æ –æ—Ç—Ä–∞–∂–∞–µ—Ç —Å—É—Ç—å —Ç–æ–≤–∞—Ä–∞ –∏ —Å–æ–¥–µ—Ä–∂–∏—Ç –∫–ª—é—á–µ–≤—ã–µ —Å–ª–æ–≤–∞, –±–µ–∑ –Ω–µ–ø—Ä–æ–≤–µ—Ä—è–µ–º—ã—Ö –æ–±–µ—â–∞–Ω–∏–π.
      - Description: –æ—Ç 140 –¥–æ 180 —Å–∏–º–≤–æ–ª–æ–≤, —Ä–µ–ª–µ–≤–∞–Ω—Ç–Ω–æ–µ —Å–æ–¥–µ—Ä–∂–∏–º–æ–µ, —Å–æ–¥–µ—Ä–∂–∏—Ç –∫–ª—é—á–µ–≤—ã–µ —Å–ª–æ–≤–∞ –≤ –Ω–∞—á–∞–ª–µ, —É–Ω–∏–∫–∞–ª—å–Ω–æ–µ, –ø–æ–Ω—è—Ç–Ω–æ–µ, —Å –ø—Ä–∏–∑—ã–≤–æ–º –∫ –¥–µ–π—Å—Ç–≤–∏—é.
    
    –§–æ—Ä–º–∞—Ç –æ—Ç–≤–µ—Ç–∞:
      Title: <—Ç–µ–∫—Å—Ç>
      Description: <—Ç–µ–∫—Å—Ç>
      
    –ï—Å–ª–∏ –∑–∞ 3 –ø–æ–ø—ã—Ç–∫–∏ –Ω–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç, –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç ('', '').
    """
    prompt = (
–¢—ã ‚Äî –ø—Ä–æ—Ñ–µ—Å—Å–∏–æ–Ω–∞–ª—å–Ω—ã–π –∫–æ–ø–∏—Ä–∞–π—Ç–µ—Ä —Å –æ–ø—ã—Ç–æ–º –Ω–∞–ø–∏—Å–∞–Ω–∏—è —ç—Ñ—Ñ–µ–∫—Ç–∏–≤–Ω—ã—Ö –æ–ø–∏—Å–∞–Ω–∏–π –¥–ª—è –ø—Ä–æ–º—ã—à–ª–µ–Ω–Ω—ã—Ö —Ç–æ–≤–∞—Ä–æ–≤. –¢–≤–æ—è –∑–∞–¥–∞—á–∞: —Å–æ–∑–¥–∞—Ç—å –∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–µ Title –∏ Description –¥–ª—è —Ç–æ–≤–∞—Ä–∞, –∫–æ—Ç–æ—Ä—ã–π –Ω–∞–∑—ã–≤–∞–µ—Ç—Å—è: "<–Ω–∞–∑–≤–∞–Ω–∏–µ —Ç–æ–≤–∞—Ä–∞>".

**–í–∞–∂–Ω–æ**: 
1) Title (70 —Å–∏–º–≤–æ–ª–æ–≤ –º–∞–∫—Å–∏–º—É–º) ‚Äî –¥–æ–ª–∂–µ–Ω –∫—Ä–∞—Ç–∫–æ –æ—Ç—Ä–∞–∂–∞—Ç—å —Å—É—Ç—å —Ç–æ–≤–∞—Ä–∞, —É–ø–æ–º—è–Ω—É—Ç—å –∫–ª—é—á–µ–≤—ã–µ —Å–ª–æ–≤–∞ –∏ –Ω–µ —Å–æ–¥–µ—Ä–∂–∞—Ç—å –ª–µ—Å—Ç–Ω—ã—Ö –æ–±–µ—â–∞–Ω–∏–π.
2) Description (140‚Äì180 —Å–∏–º–≤–æ–ª–æ–≤). –°–æ–±–ª—é–¥–∞–π:
   ‚Ä¢ –†–µ–ª–µ–≤–∞–Ω—Ç–Ω–æ—Å—Ç—å: —á—ë—Ç–∫–æ–µ —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤–∏–µ —Ä–µ–∞–ª—å–Ω—ã–º —Å–≤–æ–π—Å—Ç–≤–∞–º —Ç–æ–≤–∞—Ä–∞.
   ‚Ä¢ –û–±—ä—ë–º: 140‚Äì180 —Å–∏–º–≤–æ–ª–æ–≤ –±–µ–∑ –≤—ã–¥—É–º–æ–∫ –∏ –Ω–µ–ø–æ–¥—Ç–≤–µ—Ä–∂–¥—ë–Ω–Ω—ã—Ö —Ñ—Ä–∞–∑.
   ‚Ä¢ –ö–ª—é—á–µ–≤—ã–µ —Å–ª–æ–≤–∞: —É–ø–æ—Ç—Ä–µ–±–ª—è–π –≤ –Ω–∞—á–∞–ª–µ. –ò—Å–ø–æ–ª—å–∑—É–π —Ç–æ–ª—å–∫–æ –ø—Ä–æ–≤–µ—Ä–µ–Ω–Ω—É—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é.
   ‚Ä¢ –£–Ω–∏–∫–∞–ª—å–Ω–æ—Å—Ç—å: –∏–∑–±–µ–≥–∞–π –∑–∞–∏–º—Å—Ç–≤–æ–≤–∞–Ω–Ω—ã—Ö –æ–±–æ—Ä–æ—Ç–æ–≤ —Å —á—É–∂–∏—Ö —Å–∞–π—Ç–æ–≤.
   ‚Ä¢ –ü—Ä–∏–∑—ã–≤ –∫ –¥–µ–π—Å—Ç–≤–∏—é: –ø–æ–±—É–∂–¥–∞–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è —É–∑–Ω–∞—Ç—å –ø–æ–¥—Ä–æ–±–Ω–æ—Å—Ç–∏.
   ‚Ä¢ –ü–æ–Ω—è—Ç–Ω–æ—Å—Ç—å: –∏–∑–±–µ–≥–∞–π –ª–∏—à–Ω–∏—Ö —Å–ø–µ—Ü—Å–∏–º–≤–æ–ª–æ–≤ –∏ –≥—Ä–æ–º–∫–∏—Ö –ª–æ–∑—É–Ω–≥–æ–≤.

**–§–∏–Ω–∞–ª—å–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –æ—Ç–≤–µ—Ç–∞**:
Title: <–∫—Ä–∞—Ç–∫–∏–π –∑–∞–≥–æ–ª–æ–≤–æ–∫ –±–µ–∑ –≤–≤–æ–¥—è—â–∏—Ö –≤ –∑–∞–±–ª—É–∂–¥–µ–Ω–∏–µ –æ–±–µ—â–∞–Ω–∏–π>

Description: <–æ–ø–∏—Å–∞–Ω–∏–µ –≤ 140‚Äì180 —Å–∏–º–≤–æ–ª–æ–≤ —Å –∫–ª—é—á–µ–≤—ã–º–∏ —Å–ª–æ–≤–∞–º–∏ >

    )
    
    for attempt in range(3):
        try:
            print(f"‚ñ∂Ô∏è –ü–æ–ø—ã—Ç–∫–∞ {attempt + 1} –¥–ª—è —Ç–æ–≤–∞—Ä–∞: '{product_name}'")
            result = generator(
                prompt,
                max_new_tokens=100,
                num_return_sequences=1,
                truncation=True,
                do_sample=True,
                top_k=50,
                top_p=0.95
            )[0]["generated_text"]
            
            if "Title:" in result and "Description:" in result:
                title = result.split("Title:")[1].split("Description:")[0].strip()
                description = result.split("Description:")[1].strip()
                return title, description
            
            print(f"‚ö†Ô∏è –ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –æ—Ç–≤–µ—Ç–∞, –ø–æ–ø—ã—Ç–∫–∞ {attempt + 1}.")
            time.sleep(1)
        except Exception as e:
            print(f"‚ùå –û—à–∏–±–∫–∞ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –¥–ª—è '{product_name}' (–ø–æ–ø—ã—Ç–∫–∞ {attempt + 1}): {e}")
            time.sleep(1)
    return "", ""

# ------------------------- –û–±—Ä–∞–±–æ—Ç–∫–∞ —Ç–æ–≤–∞—Ä–æ–≤ -------------------------
def process_products(df):
    """
    –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç —Ç–æ–≤–∞—Ä—ã –∏–∑ DataFrame –ø–∞–∫–µ—Ç–∞–º–∏, –≥–µ–Ω–µ—Ä–∏—Ä—É—è Title –∏ Description.
    """
    titles = []
    descriptions = []
    total = len(df)
    
    for idx, product in enumerate(df["NAME_"]):
        print(f"‚öôÔ∏è –û–±—Ä–∞–±–æ—Ç–∫–∞ —Ç–æ–≤–∞—Ä–∞ {idx + 1}/{total}: {product}")
        title, desc = generate_text(product)
        if not title and not desc:
            print(f"‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å —Å–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞—Ç—å –¥–∞–Ω–Ω—ã–µ –¥–ª—è —Ç–æ–≤–∞—Ä–∞: {product}")
            titles.append("")
            descriptions.append("")
        else:
            titles.append(title)
            descriptions.append(desc)
        time.sleep(0.5)
    
    df["Title"] = titles
    df["Description"] = descriptions
    return df

# ------------------------- –û—Å–Ω–æ–≤–Ω–æ–π –ø—Ä–æ—Ü–µ—Å—Å -------------------------
def main():
    """
    1. –°—á–∏—Ç—ã–≤–∞–µ—Ç CSV-—Ñ–∞–π–ª.
    2. –ì–µ–Ω–µ—Ä–∏—Ä—É–µ—Ç Title –∏ Description –¥–ª—è –∫–∞–∂–¥–æ–≥–æ —Ç–æ–≤–∞—Ä–∞.
    3. –°–æ—Ö—Ä–∞–Ω—è–µ—Ç —Ä–µ–∑—É–ª—å—Ç–∞—Ç –≤ CSV.
    """
    df = pd.read_csv(csv_path, header=0, encoding="utf-8-sig", sep=";")
    if "NAME_" not in df.columns:
        print("‚ùå –û—à–∏–±–∫–∞: –í CSV-—Ñ–∞–π–ª–µ –æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç —Å—Ç–æ–ª–±–µ—Ü 'NAME_'.")
        return
    
    print(f"üìÇ –§–∞–π–ª –∑–∞–≥—Ä—É–∂–µ–Ω, —Ç–æ–≤–∞—Ä–æ–≤: {len(df)}")
    df_processed = process_products(df)
    df_processed.to_csv(output_file, index=False, encoding="utf-8-sig", sep=";")
    print(f"‚úÖ –û–±—Ä–∞–±–æ—Ç–∫–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞. –†–µ–∑—É–ª—å—Ç–∞—Ç —Å–æ—Ö—Ä–∞–Ω—ë–Ω –≤ '{output_file}'.")

if __name__ == "__main__":
    main()
